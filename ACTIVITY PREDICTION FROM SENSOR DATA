{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a1c0d3aa-0051-4a62-a8f9-cedea614ee82",
   "metadata": {},
   "source": [
    "# Problem Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b4fa9ef-645f-4e54-bbc5-bd697b260607",
   "metadata": {},
   "source": [
    "**DATA INFORMATION**\n",
    "\n",
    "This dataset contains the motion data of 14 healthy older aged between 66 and 86 years old, performed broadly scripted activities using a batteryless, wearable sensor on top of their clothing at sternum level. Data is sparse and noisy due to the use of a passive sensor. \r\n",
    "Participants were allocated in two clinical room settings (S1 and S2). The setting of S1 (Room1) uses 4 RFID reader antennas around the room (one on ceiling level, and 3 on wall level) for the collection of data, whereas the room setting S2 (Room2) uses 3 RFID reader antennas (two at ceiling level and one at wall level) for the collection of motion data. \r\n",
    "The activities performed were: \r\n",
    " walking to the chair, \r\n",
    " sitting on the chair, \r\n",
    " getting off the chair, \r\n",
    " walking to bed, \r\n",
    " lying on bed, \r\n",
    " getting off the bed and \r\n",
    " walking to the door. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6be79886-fb23-4a41-986e-f248a877d681",
   "metadata": {},
   "source": [
    "**COLUMNS INFO**\n",
    "The content of the file is as follows:\r\n",
    "Comma separated values (CSV) format\n",
    ".\r\n",
    "Column 1: Time in second\n",
    "s \r\n",
    "Column 2: Acceleration reading in G for frontal a\n",
    "xis\r\n",
    "Column 3: Acceleration reading in G for vertical \n",
    "axis\r\n",
    "Column 4: Acceleration reading in G for lateral\n",
    " axis\r\n",
    "Column 5: Id of antenna reading \n",
    "sensor\r\n",
    "Column 6: Received signal strength indicator \n",
    "(RSSI) \r\n",
    "Column \n",
    "7: Phase\r\n",
    "Column 8: \n",
    "Frequency\r\n",
    "Column 9: Label of activity, 1: sit on bed, 2: sit on chair, 3: lying, 4: \n",
    "ambulating\r\n",
    "In addition, gender of participant is included in the last character of file name eg: d1p33F (F:female).\r\n",
    "\r\n",
    ":female).\r\n",
    "\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71b870dc-8e34-4e28-9d64-d9a6ae3f9e7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import glob"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "527bb782-e615-4e63-b01a-0ad5249e0153",
   "metadata": {},
   "source": [
    "## Loading Data in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71965502-f716-42e3-a035-290c8121da92",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_from_path(path):\n",
    "\n",
    "    file_list = glob.glob(path+r'\\*')\n",
    "    dfs = []\n",
    "    for i in file_list:\n",
    "        df = pd.read_csv(i,header=None)\n",
    "        dfs.append(df)\n",
    "    combined_data = pd.concat(dfs,ignore_index=True)\n",
    "    combined_data.columns = ['Time','Acc_f','Acc_v','Acc_l','Antena_ID','rssi','phase','freq','label']\n",
    "    return combined_data\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2f973ec5-ef10-4daf-afb9-95e347840ac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s1_f = data_from_path(r\"C:\\Users\\shamm\\Downloads\\DATA(ACTIVITY RECOGNITION)\\S1_Dataset\\Female\")\n",
    "data_s1_f['gender'] = 0\n",
    "data_s1_f['RFID']= 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c7e5996-7993-4151-8059-2d427a025124",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s1_m= data_from_path(r\"C:\\Users\\shamm\\Downloads\\DATA(ACTIVITY RECOGNITION)\\S1_Dataset\\Male\")\n",
    "data_s1_m['gender'] = 1\n",
    "data_s1_m['RFID']= 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6a4ad42f-71de-4cf9-a4b1-48d5f8b19c23",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s2_m= data_from_path(r\"C:\\Users\\shamm\\Downloads\\DATA(ACTIVITY RECOGNITION)\\S2_Dataset\\Male\")\n",
    "data_s2_m['gender'] = 1\n",
    "data_s2_m['RFID']= 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "859e8c33-5132-400d-b64c-69690bdd7093",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s2_f= data_from_path(r\"C:\\Users\\shamm\\Downloads\\DATA(ACTIVITY RECOGNITION)\\S2_Dataset\\Female\")\n",
    "data_s2_f['gender'] = 0\n",
    "data_s2_f['RFID']= 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e448bd25-9f00-4584-8d8a-d598cf1b0175",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combine all these datasest\n",
    "\n",
    "final_df = pd.concat([data_s1_f,data_s2_f,data_s1_m,data_s2_m],ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0f29f3a6-3902-4e87-8155-449dc0a912c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Acc_f</th>\n",
       "      <th>Acc_v</th>\n",
       "      <th>Acc_l</th>\n",
       "      <th>Antena_ID</th>\n",
       "      <th>rssi</th>\n",
       "      <th>phase</th>\n",
       "      <th>freq</th>\n",
       "      <th>label</th>\n",
       "      <th>gender</th>\n",
       "      <th>RFID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-56.5</td>\n",
       "      <td>5.83680</td>\n",
       "      <td>921.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>3</td>\n",
       "      <td>-68.0</td>\n",
       "      <td>4.84120</td>\n",
       "      <td>925.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.75</td>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-55.5</td>\n",
       "      <td>3.64170</td>\n",
       "      <td>924.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.25</td>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>3</td>\n",
       "      <td>-57.5</td>\n",
       "      <td>1.77790</td>\n",
       "      <td>924.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.75</td>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-61.5</td>\n",
       "      <td>0.24083</td>\n",
       "      <td>922.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>141.25</td>\n",
       "      <td>0.43619</td>\n",
       "      <td>0.93932</td>\n",
       "      <td>0.077541</td>\n",
       "      <td>4</td>\n",
       "      <td>-55.0</td>\n",
       "      <td>0.36816</td>\n",
       "      <td>921.75</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>142.00</td>\n",
       "      <td>0.42446</td>\n",
       "      <td>0.93932</td>\n",
       "      <td>0.100350</td>\n",
       "      <td>4</td>\n",
       "      <td>-53.0</td>\n",
       "      <td>4.78910</td>\n",
       "      <td>923.25</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Time    Acc_f    Acc_v     Acc_l  Antena_ID  rssi    phase    freq  \\\n",
       "0    0.00  0.51826  0.89339  0.134560          4 -56.5  5.83680  921.75   \n",
       "1    0.25  0.51826  0.89339  0.134560          3 -68.0  4.84120  925.75   \n",
       "2    0.75  0.51826  0.89339  0.134560          4 -55.5  3.64170  924.25   \n",
       "3    1.25  0.51826  0.89339  0.134560          3 -57.5  1.77790  924.75   \n",
       "4    1.75  0.51826  0.89339  0.134560          4 -61.5  0.24083  922.75   \n",
       "5  141.25  0.43619  0.93932  0.077541          4 -55.0  0.36816  921.75   \n",
       "6  142.00  0.42446  0.93932  0.100350          4 -53.0  4.78910  923.25   \n",
       "\n",
       "   label  gender  RFID  \n",
       "0      1       0     4  \n",
       "1      1       0     4  \n",
       "2      1       0     4  \n",
       "3      1       0     4  \n",
       "4      1       0     4  \n",
       "5      4       0     4  \n",
       "6      4       0     4  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ff2174d7-89fa-4414-b13d-93aab59b240a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(75128, 11)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97ea607-de4c-409d-a2c5-ad6c034432f0",
   "metadata": {},
   "source": [
    "## Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a2153ea1-4870-455c-983c-8ac0809f3e5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Time</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>299.080416</td>\n",
       "      <td>257.503002</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>121.250000</td>\n",
       "      <td>250.715000</td>\n",
       "      <td>402.500000</td>\n",
       "      <td>1739.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_f</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>0.714211</td>\n",
       "      <td>0.404585</td>\n",
       "      <td>-0.74808</td>\n",
       "      <td>0.342380</td>\n",
       "      <td>0.682420</td>\n",
       "      <td>1.104500</td>\n",
       "      <td>1.5032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_v</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>0.345199</td>\n",
       "      <td>0.419041</td>\n",
       "      <td>-0.55349</td>\n",
       "      <td>-0.002297</td>\n",
       "      <td>0.215880</td>\n",
       "      <td>0.858940</td>\n",
       "      <td>2.0302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_l</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>-0.217477</td>\n",
       "      <td>0.438219</td>\n",
       "      <td>-1.33640</td>\n",
       "      <td>-0.184730</td>\n",
       "      <td>-0.070699</td>\n",
       "      <td>0.031928</td>\n",
       "      <td>1.2178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>2.409581</td>\n",
       "      <td>1.102165</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rssi</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>-58.277253</td>\n",
       "      <td>5.174083</td>\n",
       "      <td>-72.00000</td>\n",
       "      <td>-62.000000</td>\n",
       "      <td>-58.000000</td>\n",
       "      <td>-56.000000</td>\n",
       "      <td>-38.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phase</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>3.157279</td>\n",
       "      <td>2.182257</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.032400</td>\n",
       "      <td>2.767300</td>\n",
       "      <td>5.358575</td>\n",
       "      <td>6.2817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>922.670536</td>\n",
       "      <td>1.679093</td>\n",
       "      <td>920.25000</td>\n",
       "      <td>921.250000</td>\n",
       "      <td>922.750000</td>\n",
       "      <td>924.250000</td>\n",
       "      <td>925.7500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>2.528378</td>\n",
       "      <td>0.864258</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>0.416622</td>\n",
       "      <td>0.493002</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFID</th>\n",
       "      <td>75128.0</td>\n",
       "      <td>3.698568</td>\n",
       "      <td>0.458883</td>\n",
       "      <td>3.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             count        mean         std        min         25%         50%  \\\n",
       "Time       75128.0  299.080416  257.503002    0.00000  121.250000  250.715000   \n",
       "Acc_f      75128.0    0.714211    0.404585   -0.74808    0.342380    0.682420   \n",
       "Acc_v      75128.0    0.345199    0.419041   -0.55349   -0.002297    0.215880   \n",
       "Acc_l      75128.0   -0.217477    0.438219   -1.33640   -0.184730   -0.070699   \n",
       "Antena_ID  75128.0    2.409581    1.102165    1.00000    1.000000    3.000000   \n",
       "rssi       75128.0  -58.277253    5.174083  -72.00000  -62.000000  -58.000000   \n",
       "phase      75128.0    3.157279    2.182257    0.00000    1.032400    2.767300   \n",
       "freq       75128.0  922.670536    1.679093  920.25000  921.250000  922.750000   \n",
       "label      75128.0    2.528378    0.864258    1.00000    2.000000    3.000000   \n",
       "gender     75128.0    0.416622    0.493002    0.00000    0.000000    0.000000   \n",
       "RFID       75128.0    3.698568    0.458883    3.00000    3.000000    4.000000   \n",
       "\n",
       "                  75%        max  \n",
       "Time       402.500000  1739.4000  \n",
       "Acc_f        1.104500     1.5032  \n",
       "Acc_v        0.858940     2.0302  \n",
       "Acc_l        0.031928     1.2178  \n",
       "Antena_ID    3.000000     4.0000  \n",
       "rssi       -56.000000   -38.5000  \n",
       "phase        5.358575     6.2817  \n",
       "freq       924.250000   925.7500  \n",
       "label        3.000000     4.0000  \n",
       "gender       1.000000     1.0000  \n",
       "RFID         4.000000     4.0000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e2d92cf3-9771-4cb9-8d7c-197ae960997b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7,5))\n",
    "sns.heatmap(final_df.corr(),annot=True,vmin=-1,cmap='RdBu')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "618839aa-f191-4bbc-b3c7-84328ba7458f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In order to have better insights lets first explore ACC data with Activity that is being performed\n",
    "# Lets take data of a single participant for exploration\n",
    "\n",
    "p1 = r\"C:\\Users\\shamm\\Downloads\\DATA(ACTIVITY RECOGNITION)\\S1_Dataset\\Male\\d1p07M\"\n",
    "data_p1 = pd.read_csv(p1,header =None)\n",
    "data_p1.columns = ['Time','Acc_f' , 'Acc_v', 'Acc_l','Antenna_ID','rssi','phase','freq','label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4f04a788-6c76-4628-8425-6dd3c3c9e41b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "3    94\n",
       "1    84\n",
       "2    54\n",
       "4     7\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_p1['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4803b615-1281-4e5f-990a-826697b67e50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets explore 2:Sitting on chair activity with ACC\n",
    "sitting_data = data_p1[data_p1['label']==2]\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_f'],label='ACC_Frontal')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_v'],label='ACC_Vertical')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_l'],label='ACC_Lateral')\n",
    "plt.title('ACC Data: Sitting on chair')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5176f400-f993-41bb-ad95-d092f033c264",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets explore 2:Sitting on bed activity with ACC\n",
    "sitting_data = data_p1[data_p1['label']==1]\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_f'],label='ACC_Frontal')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_v'],label='ACC_Vertical')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_l'],label='ACC_Lateral')\n",
    "plt.title('ACC Data: Sitting on bed')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "44aa6552-2954-476f-9cde-85b4e86acc00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets explore 2:Sitting on chair activity with ACC\n",
    "sitting_data = data_p1[data_p1['label']==3]\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_f'],label='ACC_Frontal')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_v'],label='ACC_Vertical')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_l'],label='ACC_Lateral')\n",
    "plt.title('ACC Data: Lying on bed')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "504b1a94-f844-452f-8df4-d823d4ad9c56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets explore 2:Sitting on chair activity with ACC\n",
    "sitting_data = data_p1[data_p1['label']==4]\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_f'],label='ACC_Frontal')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_v'],label='ACC_Vertical')\n",
    "plt.plot(sitting_data['Time'],sitting_data['Acc_l'],label='ACC_Lateral')\n",
    "plt.title('ACC Data: Ambulating')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "676d45c8-f847-421e-a7b6-dc0b53d4eea5",
   "metadata": {},
   "source": [
    "Inference:\n",
    "\n",
    "The Accelaration Data is different for different activities. This shows that It could be an informataive attribute to predict what kind of activity is going on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0c6c2a96-b505-41c3-91f1-3f8bc962baa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Does ACC data for Female will be different from Male?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53c0a2ac-ae5c-481f-aa9e-90dff66a0ba1",
   "metadata": {},
   "source": [
    "Try at home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7d397a1c-eb98-46e5-8050-769b74773b96",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets look at distribution of male and Female in Final data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e2d975f7-ba5c-4488-889e-077158367328",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZkAAAGFCAYAAAAvsY4uAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAqwElEQVR4nO3deXhU5cH+8XtmkskeICthTxBll0VQ5EURFcWqVVuXt251rVVf11ba11ZbflVbl9YVFV4R676ioigqyiKKCIIsshMgK2QPWWf9/REKRkAhmTNPzsz3c11ckDOTyS2GufM855zncQSDwaAAALCA03QAAEDkomQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWQAAJahZAAAlqFkAACWoWRge1OnTlVubq7i4+M1cuRILVq0yHQkAHtQMrC1V199VbfccovuvPNOrVixQuPGjdOkSZO0Y8cO09EASHIEg8Gg6RBAWx177LEaMWKEnnzyyb3HBgwYoHPOOUf33XefwWQAJEYysDGPx6Ply5dr4sSJrY5PnDhRX3zxhaFUAL6PkoFtlZeXy+/3Kzs7u9Xx7OxslZaWGkoF4PsoGdiew+Fo9XEwGNzvGAAzKBnYVkZGhlwu136jll27du03ugFgBiUD23K73Ro5cqQ+/vjjVsc//vhjHX/88YZSAfi+GNMBgPa47bbbdOmll+qYY47RmDFjNG3aNO3YsUPXXXed6WgARMnA5i688EJVVFRoypQpKikp0eDBgzVnzhz17t3bdDQA4j4ZAICFOCcDALAM02XAIfD4AtpeUa/CqkY1ePxq9vnV7Auoydv692ZvQE0+v5q9ATX7/GryBuSOcahLolvpSW6lJbmVlhy37897fsW6+HkPkYmSAfYIBIIqqm5Ufnn93l9by+uVX16n4uom+QPWzSynxMfsLZ705DjlZSZpQNdU9c9JUd/MZEoItsU5GUSlnbVNWrK1QutKdiu/vE755fXaXtGgZl/AdLT9uF1O5WUmaWBOqgZ176ThvTprcLdOcsdQPOj4KBlEhZKaRi3ZWqGvtlZqydYKbatoMB2pXdwxTg3MSdXwXp01rGdnjclLV1ZqvOlYwH4oGUSkJq9fS7ZWaP6GMi3YWKb88nrTkSzlcEjDe3bW6YO7atLgHPVMSzQdCZBEySCCFFc3at66nfpsQ5m+3FKhRq/fdCRjBuak7imcruqXnWI6DqIYJQNb8/oD+mjtTr3y9Q59vrlcfDfvr29mkk4b1DLCGdKjk+k4iDKUDGwpv7xeryzdoTe/KVR5ncd0HNvo3jlBpw3qqnOHd6dwEBaUDGyj2efXh2tK9dJXO/RVfqXpOLY3uk+arjkhT6cMyGJrBFiGkkGHt3Hnbr28dIdmrShSdYPXdJyI0zczSVf9V57OG9Fd8bEu03EQYSgZdEjBYFDvry7RjM/z9c2OatNxokJGsluXHtdHl43prS5JbtNxECEoGXQ4CzaW6YG567WmqNZ0lKiUEOvSL0f20NXjctU7Pcl0HNgcJYMOY2VBtf7xwXp9ubXCdBRIcjqkiQO76toT8zSiVxfTcWBTlAyM21JWpwfnbtAHa0p/+skwYtLgrvrzmQPVrXOC6SiwGUoGxpTWNOnhTzbq9eWFli4+idBIiHXpxglH6JpxeaybhkNGySDsahq8mrpgs577YpuavB1vQUr8uLyMJN199iCdeGSm6SiwAUoGYRMIBDVjcb4enbdJtU0+03HQTqcNytZdZw1Sd6bQ8CMoGYRFQWWDbn/tWy3dxk2UkSQh1qUbTuqra07IU1wM99hgf5QMLPfa1wWa8t53qmtm9BKpcjOSdPdZAzX+qCzTUdDBUDKwTHlds/7w5mp9sm6n6SgIk9MGZeu+84YqjZs5sQclA0t8tLZUf3xrtSrqWbwy2mSnxunhC4drTN9001HQAVAyCKm6Zp+mzF6r15YVmo4Cg5wO6cYJ/XTzyf3kcrL4ZjSjZBAyS/MrdfvrK1VQ2Wg6CjqI0blpevSi4eraia2hoxUlg3bz+QN64KMNmr5wq7inEj+UluTWY/89XGOPyDAdBQZQMmiXmkavrn9xuRZvZr0xHJzL6dDk04/StSf0NR0FYUbJoM22ldfryue+1tayetNRYBNnHd1N9/9iqBLc3FMTLSgZtMlXWyt03QvLVcUmYjhMA3JSNe3SkeqZlmg6CsKAksFhe31Zge6ctUYeP+uOoW26JMbquStHa2iPzqajwGKUDA7LY/M26aGPN5qOgQiQEh+jmVeM0sjeaaajwEKUDA5JMBjUX95dq+e+3G46CiJIktulZ349SsflceNmpKJk8JM8voBuf/1bzf622HQURKD4WKemX3aMxvVj64BIRMngR9U3+3TdC8u1aFO56SiIYO4Yp566ZIQm9M82HQUhRsngoJq8fl36zFf6eluV6SiIArEuhx777+E6fXCO6SgIIfZQxQH5A0Hd+NI3FAzCxusP6saXVuidlUWmoyCEKBkc0P++tVqfrNtlOgaijC8Q1K2vrtTrywpMR0GIUDLYzwNz1+tV/pHDkEBQuuPNVXrxK65kjASUDFqZuThfT3y2xXQMRLlgULpz1hq9t4orGu2OksFes78t1pT3vjMdA9jr96+v0pqiGtMx0A6UDCRJizeX6/bXvmWpfnQojV6/rv33MpXXNZuOgjaiZKA1RTX6zfPLWYsMHVJxTZOue365PD6+P+2Ikoly2yvq9etnv1Zds890FOCglm2v0p/eXm06BtqAkoli1Q0eXTZjKVMRsIXXlhVqxuf5pmPgMMWYDgBz/vDmam2vaDAd47BUf/6iaha/3OqYM6mzet74giQp4GlU9YKZati4RIGm3XKlZin1mLOVMvyMg75mw4YvVLPkNXmrSqSATzFduil11LlKHjzhgM+v+fI1VS/8t1JGnq20U67dd/yrt1S79C1JUqfjfqnUUefsfay5eIMqP5qqrpf9Uw4nG3a11T1z1qlfdjLrnNkIJROlXl66Qx+uLTUdo01iM3op+8J79h1w7huQV82brqYdq5Vx1u2K6ZStxvwVqvxoqlzJaUrsd9wBX8+ZkKxOYy5QbFpPyRWjxi1LVTHnYbkSOykhb2Sr5zaXbNTub+cqNrNPq+Oesm2q+fxFZf7yLikYVNmbUxTfZ5jcmX0U9PtUMfcJpZ9+IwXTTi0rUazQOzeMVZ+MJNNxcAiYLotCW8rqNGW2jS9VdrrkSu6y71dip70PNRevV9LgCYrvNVQxnbKVMux0ubNy5SnZdNCXi+81VIlHHq/YjJ6K7ZKj1GN+LndWrpoLW/8dBTyNKp/9oNJP/x8545NbPeYtL1BsZh8l9D5aCX2GKTazj7wVhZKk2qVvKb7nIMXlHBnCv4ToVdPo1dX/XqbdTezKageUTJTx+AK6+ZUVavT6TUdpM19VsQqfuEyFT12lsnf+IW/1vhFZXI+Baty8VL7d5QoGg2ravkreqmLF5404pNcOBoNq3LZS3spCxfUc3Oqxyo+fVELfUUroM2y/z3Nn9pGvqki+2l3y1eySr7JI7oze8lYVq271J+o87tJ2/Tejtc276nTTyyvE+r4dH6swR5l756zTtIVbTcdos8YtyxTwNSs2rbv89dWq+eIVeSsL1e2qqXIlpCro96riw8dUv+ZTyemSHA6ln37TQc+v/EeguV6FT1yuoN8rOZxKn/hbJQ+duPfx+u8WqObL15Rz+b/kiHGr9KU/yJ2V1+qczO4Vc1S77B1JUuoxP1fK8DO085U7lTLiTAUDftUsfklyxijtlGsV/4MCQ9tM+fkgXTamj+kY+BGck4kin28q1/RF9i0YSUroe8y+DzKluG79VTTtatWvnqfU0eeqdtlsNRdvUOYv/qyY1Cw1FaxR5cdPypWcdsARyH843AnKueJRBT1Natq+UpWfPqOYzl0V32uofLVlqpw3XdkXTpEjxn3Q10gZfkarCwzqVn8ihztBcd37q2j6dcq57J/y765Q+bv3q/tvnpEjJjYUfyVR7f4PN+iUAdnq1jnBdBQcBCUTJSrrPbr99ZWKtHGr0x0vd0YfeauKFfA2q3rhv5V53p1K7DtKkuTOypV3V75ql7714yXjcCq2S7eWz8nOk7eiUDVfvq74XkPlKd2sQEO1Smbesu8TggE1F6zV7m/eU6/fzdrvhL6/oUY1i19W9q/+oebijYpN66bYtO6KTeuuoN8nb1WR3D+4eACHr67ZpztnrdazV4w2HQUHQclEiTveWKWdtZF3P0zQ55W3okBxPQdJAb8U8MkhR+snOZw63HYNBoMtU2eS4nsfrZwrH2/1eMWcRxSb3kOpx/7igFeMVc2brpRR5ygmNUOe0o0K+r93DizglwLcvR4qn20o09srinTO8O6mo+AAKJko8PyS7fpk3U7TMUKi6tNnlHDEaLlSMxVoqFHNF68o4GlQ8uCT5YxLVFzPwaqaP0OOWLdcqVlqLlij+rWfqsuEq/e+Rvl7D8mVkq4uJ/5aUst9L+6u/RTTJUfye9W4ZZnq136qtInXS5KccYn7jTocsXFyxqcccDTSmL9C3qpipZ95myTJnXOkfJWFatyyTL7d5ZLTpZg03hBDacp73+mEIzOVlnTw6UyYQclEuM27duue9218ufIP+HaXq3z2A/I31MqVmKq4bv3V9dKHFNMpS5KUefZkVS14TuWzH1SgqU6u1Cx1HnepkodN2vcatWUto5s9At5mVX48Vf7dFXLEuBWb1kMZZ96upAEnHHa+gLdZlZ88pcyzJ8ux52vEpGSoyym/UfkHD8vhilX6z26VMzaunX8T+L7Keo/+OnutHrlouOko+AGuLotwv5q+RF9sqTAdAwiLZ389Sif1zzIdA9/DfTIR7NP1OykYRJU7Z61msdcOhpKJUP5AUPfOWW86BhBWxTVNuv9Dvu87EkomQr28dIc276ozHQMIu+eXbNfX2ypNx8AelEwEqmv26eFPDr5WFxDJgkHpD2+uko9N+DoESiYCPTV/C3vEIKptKavXm98Umo4BUTIRp6SmUf/3ub2XjgFC4dF5m9myuQOgZCLMA3M3qMnLPyygqLpRLy/dYTpG1KNkIsiaohq9vaLIdAygw3j8s81qsvG2FpGAkokg985ZpwC31gJ7le1u1nNfbDMdI6pRMhGCGy+BA3t64VY1ehjNmELJRIhH5m02HQHokCrrPXrla87NmELJRIDl26v0bUG16RhAh/V/i/K5b8YQSiYCzFicbzoC0KEVVTfqnZXFpmNEJUrG5kpqGjV3TanpGECH99SCLWLR+fCjZGzuuS+2y8clZcBP2rSrTh9/Fxmb99kJJWNjjR4/JzSBw/ASN2eGHSVjY++tKlZ1g9d0DMA2Pt9Uzrp+YUbJ2NirXxeYjgDYii8Q1HvfcgFAOFEyNrV5V52Wba8yHQOwnVlcZRZWlIxNvcq5GKBNvi2o1rbyetMxogYlY0MeX0BvfcNCmEBbzWIh2bChZGxo3rqdqqj3mI4B2NY7KymZcKFkbGjuWm6+BNpjW0WDVuzgnGY4UDI2EwgEtXBTuekYgO2xzEx4UDI2s6qoRpVMlQHt9t6qYhbNDANKxmbmb9hlOgIQEcrrPFq0mVkBq1EyNjN/Q5npCEDEYLty61EyNlJZ79GqwmrTMYCIsWhTOSszW4ySsZFFm8rEgstA6FTWe7SljBszrUTJ2AhTZUDoLdtWaTpCRKNkbCIYDGrhRkoGCLWvt3G/jJUoGZtYVVjDXf6ABZZvZyRjJUrGJpgqA6yxraJBZbvZY8YqlIxNLNjI/TGAVTgvYx1KxgZ8/oDWFNWajgFELM7LWIeSsYFtFfXysPwFYBnOy1iHkrGBTTvrTEcAItra4lo1evymY0QkSsYGNu2iZAAr+QJBlv63CCVjA5QMYL1l2ykZK1AyNrBp527TEYCIt7qoxnSEiETJdHD+QFBby1lbCbBacXWj6QgRqU0lM2HCBFVXV+93vLa2VhMmTGhvJnzP9op6eXxcWQZYjZKxRptKZv78+fJ49l/ipKmpSYsWLWp3KOzD+RggPKoavGrycoVZqMUczpNXrVq198/fffedSktL937s9/v14Ycfqnv37qFLB87HAGFUVN2ovpnJpmNElMMqmWHDhsnhcMjhcBxwWiwhIUGPPfZYyMKBkQwQTiXVTZRMiB1WyeTn5ysYDCovL09Lly5VZmbm3sfcbreysrLkcrlCHjKacSMmED6clwm9wyqZ3r17S5ICAU5Eh8u2Cq4sA8KluIaSCbXDKpnv27hxo+bPn69du3btVzp33XVXu4OhZWHMBpa6AMKGkUzotalkpk+frt/+9rfKyMhQ165d5XA49j7mcDgomRCpp2CAsCqpaTIdIeK0qWT+9re/6Z577tHkyZNDnQffU9/sMx0BiCpFjGRCrk33yVRVVen8888PdRb8QIOHkgHCqaSakUyotalkzj//fH300UehzoIfqGtmugwIp0avX9UN+99ojrZr03TZEUccoT//+c9asmSJhgwZotjY2FaP33TTTSEJF+0amC4Dwq6u2afOiW7TMSKGIxgMBg/3k3Jzcw/+gg6Htm7d2q5QaPHR2lJd+/xy0zGAqDL/d+PVJyPJdIyI0aaRTH5+fqhz4AC4fBkIPx/3AYYUS/13YHVMlwFh5/Uf9uQOfkSbRjJXXnnljz4+Y8aMNoVBa1xdBoSfj5IJqTaVTFVV621KvV6v1qxZo+rqavaTCSGuLgPCz8t0WUi1qWRmzZq137FAIKDrr79eeXl57Q6FFtyMaU+/67VZl+tdxfi558KWnFMldTGdImK0ee2yH3I6nbr11ls1fvx43XHHHaF62agWOPwL/2DQqRmVuj/5ZXUpXWw6CtrFazpARAlZyUjSli1b5PPx03eoJLrZNsEOeiU06ekeH6l/0Rty1PH9b3tO/t2FUptK5rbbbmv1cTAYVElJid5//31dfvnlIQkGKdEd0p8BEGKxzqD+lbdMZ5TPlLOg6qc/AfbgoGRCqU3vYitWrGj1sdPpVGZmph566KGfvPIMhy6JkUyHdW2PHbo98KziCjeYjoJQc/LDXSi16W/zs88+C3UOHEBiHN/sHc2YLjV6uMsbyi6eZzoKrBLfyXSCiNKud7GysjJt2LBBDodDRx55ZKvtmNF+SUyXdRiZbq+e7v2phhe/Ikdxs+k4sFJShukEEaVNd/zX19fryiuvVE5Ojk444QSNGzdO3bp101VXXaWGhoZQZ4xayfGUjGkOR1B/z1utJSl3aETBc3L4KZiI5k6RYuJMp4gobSqZ2267TQsWLNDs2bNVXV2t6upqvfPOO1qwYIFuv/32UGeMWmmsBGvURTklWtv9fl1UfJ9c9TtNx0E4MIoJuTatwpyRkaE33nhD48ePb3X8s88+0wUXXKCysrJQ5YtqxdWNOv7vn5qOEXWGpNRravbb6lE4Rw5xr1JU6TFKuvoT0ykiSpvmYxoaGpSdnb3f8aysLKbLQigtiZFMOKXE+PRU7mIdX/qCHIX1puPAhERGMqHWpumyMWPG6O6771ZT075lMxobG/XXv/5VY8aMCVm4aBcf61IyV5iFxZ191mtF2p0aW/C0HF4KJmolpZtOEHHa9A728MMPa9KkSerRo4eOPvpoORwOrVy5UnFxcWzLHGLpyW6W/LfQGZnl+nvii0ot/cp0FHQEjGRCrk0lM2TIEG3atEkvvPCC1q9fr2AwqIsuukgXX3yxEhISQp0xqqUnubW9ginIUOub2Kinun+gIwrfkmM3q+5iD078h1ybSua+++5Tdna2rrnmmlbHZ8yYobKyMk2ePDkk4SDlZiTrmx3VpmNEjASXX4/kfq1Ty2bKUVBrOg46mi4H31oebdOmczJPP/20+vfvv9/xQYMG6amnnmp3KOwzICfFdISI8T+98vVt5l80sfBROZopGBxA5v7va2ifNo1kSktLlZOTs9/xzMxMlZSUtDsU9hmYk2o6gu2dmF6lf6a+pvSSBaajoCNzxUlpjGRCrU0l07NnTy1evFi5ua3/hyxevFjdunULSTC06E/JtFlOvEfTen6swUWvyVHPHiH4CRn9WObfAm0qmauvvlq33HKLvF7v3u2W582bpzvuuIM7/kMsLcmt7NQ47axlOZND5XIE9EDetzqn8lk5C8pNx4FdZB5lOkFEalPJ3HHHHaqsrNT1118vj8cjSYqPj9fkyZP1xz/+MaQBIQ3ISdXOWlZROBSXdyvSHxwzlVC01nQU2E3mANMJIlKblpX5j7q6Oq1bt04JCQnq16+f4uJYWM4Kf/9gvZ5asMV0jA5tRKfdejxjlroVfWg6CuzqguelgWebThFx2nU7eXJyskaNGhWqLDgIrjA7uC6xPj3VZ6FGl7woR1Gj6TiwsyxGMlZgzRIb4AqzA5uSu1YX735WroJi01Fgd644KS3PdIqIRMnYQF5mstwxTnl83JkuSedl79KUuOeVXLLcdBREiu4juLLMIpSMDbicDh2Znaw1RdF9A2H/5AY92fU99Sl8hyX4EVp9/st0gohFydjEgK6pUVsySTF+PZH7pU7c+W85CutMx0Ek6jPOdIKI1aZlZRB+R/fsbDqCEb/vvUkr0/+s8QVT5fBQMLCAK07qOdp0iojFSMYmJvTPMh0hrE7NqNT9yS+rS+li01EQ6bqPlGJZPd4qlIxNdOucoIE5qfquJLKnzHolNGlaj7k6qvANOer8puMgGnA+xlKUjI2cMjA7Yksm1hnUv/KW6YzymXIWVJmOg2hCyViKczI2cuqAbNMRLHFtjx1a03WKziz8l5xNFAzCyBUn9TzWdIqIxkjGRob06KSuqfEqrW0yHSUkxnSp0cNd3lB28TzTURCteo6WYuNNp4hojGRs5uQB9r8AINPt1Vv95uolzy0UDMwa+HPTCSIeJWMzp9h4yszhCOofeau0JOX3GlHwnBx+ti+AQQ4XJRMGTJfZzPFHpCvR7VKDx15XXl2UU6K7XM8psXiV6ShAiz5jpWT7zwx0dJSMzcTFuDSuX4bmrt1pOsohGZJSr6nZb6tn4fumowCtDTrPdIKowHSZDdlhyiwlxqcX+y3Qu7qFgkHH44xhqixMGMnY0IT+WXI6pEAHXSPyzj7rdUX9DMUUFJqOAhxY7olSYprpFFGBkrGh9OQ4jc5N05KtlaajtHJmZrnuTXxBqaVLTUcBftygc00niBqUjE1dPqZPhymZvomNerr7HPUtnCXHbva8QQfnjJUGnGk6RdSgZGxq4qCu6t45QUXV5rYcTnD59Uju1zq1bKYcBZG53A0iUP+fSQldTKeIGpz4tymX06HLxvQ29vX/p1e+vs38iyYWPipHMwUDGznut6YTRBVKxsYuGtVLCbHh3TL2xPQqLc99WrfvulPu6i1h/dpAu+UMk3odZzpFVKFkbKxTYqzOG9E9LF8rJ96j2f3e18zGW5ResiAsXxMIOUYxYUfJ2NwVY/vI4bDu9V2OgP7Zd4UWJ/xOQwpelCPgte6LAVZKzuYGTAM48W9zR2Sl6L+OyNCiTeUhf+1fdyvUZMdzSihaG/LXBsLumCulGLfpFFGHkokAV47NDWnJjOi0W09kvKWcorkhe03AKJe7pWQQdpRMBBh/VKbyMpK0tby+Xa/TJdanp/ss0KiSF+Uoiow9awBJ0uBfsBimIZyTiQAOh0OXH9+nXa8xJXetlnX6g0YXPCOHj4JBJHFIY24wHSJqUTIR4pcjeygl/vAHpudl79KaXg/pspJ75KortiAZYNjg86SuQ0yniFqUTIRIiovRFYcxmumf3KDPjnhND9XcquRdy60LBpjkjJUm/Ml0iqhGyUSQ35zYVxnJcT/6nKQYv2b2+1wfOG9RbuHbcqiDLuUMhMKIy6S0PNMpoholE0GS4mJ066n9Dvr473tv0sr0P2t8wVQ5PHVhTAYYEJsknTjZdIqoR8lEmItG9dIRWcmtjp2aUakVfZ7QDTvvVmzNNjPBgHA77joppeNv8BfpHMFgkPmSCDNv3U5d9dwy9Upo0rQec3VU4RtyBP2mYwHhk9BFuvlbKb6T6SRRj/tkItDJA7I1/dhdOnnDX+UsqDIdBwi//7qNgukgmC6LUKcef6ycnt2mYwDh16WPNPpa0ymwByUTqbIHSqOuMZ0CCL+zHpFi402nwB6UTCQ76Y9SEktpIIoMu0TKG286Bb6Hkolk8Z2kiX8znSIq3LeoWY6/1uqWD/ctyfPWOq9Oe6FeGffvluOvtVpZemgXX1Q3BXXD+43KeWi34v9WqwFP1GnOptZbLBTVBnTJW41Kv3+3Eu+p1bCn6rS8eN/rP/hFs7If3K3sB3frX182t/rcrwp9GjmtTv5AhF3zk5wtncb3e0fDif9Id/SF0rp3pfXvmU4Ssb4u8mvaNx4NzW79M1u9J6ixPWN0/kCHrpl9aOvBefxBnfp8vbKSnHrj/AT1SHWqoDagFPe+TYOqGoMaO6NeJ+XG6IOLE5WV5NCWyoA6x7c8Z/VOv+76rFnv/SpRwaB05ssNOrVvjAZnueT1B3Xd+02admaCXE4LNyIyYdL9LVeVoUOhZKLBWY9IBUul+l2mk0ScOk9QF7/VqOlnJehvC1uPGC49umXvkm3VgUN+vRkrvKpsDOqLKxMU62opgd6dW5fXPxY3q2cnp579ecLeY32+95x15QENzXZpQm7LP++h2U6tKwtocJZLD3zh0Qm9YjSqe3i37bZc/zOlQeeYToEDYLosGiRlSGc/ZjpFRLphTpN+1i9Gp+SF5ue1dzf4NKZHjG6Y06TsB3dr8NQ63buoudXU1rsbfDomx6XzX29Q1gO7NfzpOk1f7tn7+JAspzZW+LWjJqDt1QFtrAhocJZTmysDmrnSq79N+PGlh2wnrpN0xoOmU+AgKJlocdTpLes4IWReWePVNyV+3XdK6N60t1YF9MZ3XvkD0pxfJepPJ8TpoS89umeRp9VznlzmUb80p+ZekqjrRrp104dN+ve3Lc8ZkOnSvSfH69TnGzTxhQbdd3K8BmS6dN17jbr/1DjN3eLT4Kl1Gv50nRZu94UsuzETp0ipOaZT4CCYLosmp90n5S+UqraZTmJ7BTUB3fxhkz66JFHxMaE7txEISllJDk07K14up0Mju7lUvDugB77w6K4T4/Y+55huLUUiScNzXFpbFtCTy7y6bM8U3XXHuHXdMfu2Gp650qOUOIfG9HDpqMfr9PU1SSqsDeqiNxqVf3Oy4kL43xBWR54ujbjcdAr8CEommsQlS+dOk56dJLHMTLssL/FrV31QI6ft243UH5QWbvfr8aUeNf8ppU0n1nNSHIp1Olp97oAMp0rrgvL4g3K7HMpJcWhgZutJiAEZTr25zvvDl5MklTcENGVBsxZekaSvivw6Mt2pfuku9UuXvAFpY0VAQ7JteI4mtYd0zpOSw6YFGSUomWjT61hp7M3S5/80ncTWTs6N0erfJrU6dsU7jeqf4dLkse42X7k1tqdLL632KhAMyrnnzXNjRUA5yQ6591wIMLanSxsqWl9MsLEioN6dDjz7fcuHzbr1uDj1SHXq6yK/vN/7VF8gKL8dr2R2xki/nCElpplOgp/AOZlodNL/Sr3Hmk5haylxDg3OcrX6lRTrUHpCy3FJqmwMamWpX9+VtYwaN5QHtLLUr9K6fe/yl81q1B8/2Xd582+PcauiMaibP2jSxgq/3t/o1b2fe3TDqH1TX7ceF6clhX7du6hZmysDemm1V9O+af2c//h4i0+bKv26YXSsJGl0d5fWlwf0wSavpi33yOVw6Kh0G74NTPhTyw9M6PAYyUQjV6x0wfPS9PFS9Q7TaSLWuxu8uuKdfQVy0ZuNkqS7T3TrL+NbzqfsqAnI6dj3Jt+zk1MfXZKoW+c2a+iT9eqe6tDNx7o1eey+AhnV3aVZFyboj/OaNWVBs3K7OPXwafG6eGhsq6/f6A3qxg+a9OovE/aOirqnOvXYpHhd8U6T4mKk586JV0Kszaab+p8pjb3FdAocIpb6j2Y710rPTJTYwAx2kd5PuvYzKS7FdBIcIhuOkxEy2YOkc5+SZLOfZBGd3CnSRS9SMDZDyUS7AWe1nKMBOjKHSzpvmpR5lOkkOEyUDKQT75AGnWs6BXBwZz0s9T/DdAq0ASWDFj+fKnUdajoFsL8Jf2K1ChujZNDCnShd/LqUlmc6CbDP6N9IJ/zedAq0AyWDfVK6SpfPljr3Mp0EkAadJ53+d9Mp0E6UDFrr1EO67F0ptbvpJIhmeeOlc5+WnLxF2R3/B7G/tNyWoknONp0E0ShnmHThC1LM/isYwH4oGRxYxhEtRZOYYToJokm3EdKls7gXJoJQMji4rP7SZe+wpS3Co8846fJ3WfQywlAy+HFdB7f8ZJnAP3xY6MhJ0sVvMIKJQKxdhkNTvll68RdseIbQG3JBy74wLtbrjUSUDA5dXZn08oVS0XLTSRApRl0tnfEgG49FMEoGh8fTIL15lbRhjukksLtxt0sn32U6BSxGyeDwBQLSB3dIX083nQR25IyVTr9PGn2N6SQIA0oGbbf4EenjuyXxLYRDlJwtnf+c1HuM6SQIE0oG7bN2lvTOjWx8hp/WY7R0wb+l1BzTSRBGlAzar3yz9PqvpZ2rTSdBR3XMVS3rkHEXf9ShZBAa3iZp7v9Ky54xnQQdiStO+tlD0ohLTSeBIZQMQmvt29K7N0nNNaaTwLROPaULnpO6jzSdBAZRMgi9qm3S61dIxd+YTgJThl8inXavFN/JdBIYRsnAGn6v9MlfpC+fEFefRZGUbtLZj0r9TjWdBB0EJQNrbf9Seu8WqWy96SSw2rBLpNMZvaA1SgbW83ulLx6VFjwg+RpNp0GopXSTznpEOnKi6STogCgZhE9lvvT+7dKWeaaTIFSGXdxy7iWhs+kk6KAoGYTfmjelD/8o1e00nQRt1fNYaeI9Us9RppOgg6NkYEZTjTTv/0nLn5UCPtNpcKi65Eqn/EUadI7pJLAJSgZmVW6VFtwvrXpNCvpNp8HBxHeWTrxDGnUNd+3jsFAy6BjKNkrz72tZC41LnjsOl7ulWE78Pdtwo00oGXQspWukz+6VNrxvOkl0i0mQhv23dPxNUlqu6TSwMUoGHVPRcumz+6TNH5tOEl0SM1r2eRl1jZSUbjoNIgAlg45t1zrpq6daztl4G0yniVxpfaUxN0jDfiXFJphOgwhCycAeGqukb56Xls2QqvJNp4kcPY9tmRI76gzJ6TSdBhGIkoG9BIPS1vnS8pnS+velgNd0IvtJ7SEN+aU09EIpe6DpNIhwlAzsq65MWvOG9N27UsESKRgwnajjiu8kDfx5S7H0His5HKYTIUpQMogMdWXS+vekdbOl/IWMcKSWy4/7TZSGXiAdeboUE2c6EaIQJYPI01QjbfhQWveutOXT6LpgILW7dMTJ0hGnSHnjWREZxlEyiGzeRqngK2nHV9KOL6XCZZJnt+lUoRPfqWX6q8+4llLhHAs6GEoG0SXgl3au2Vc6BV9JtUWmUx0aV5yUeZSUPVjqOkTqPUbqejRXhaFDo2SAmsKW+3EqNksVW/b9Xlto7mKClBwpe1BLoWQPlroOltL7Sa4YM3mANqJkgIPxNrUs4FmxueX3hnKpsbrlnE9T9Z4//+fjWh10zTVnzJ5fsS0lkZghpXSVkrMP/HtKV86lIGJQMkAoBAJSc23Ln50xkit2T7G4zOYCDKNkAACW4YwhEMEWLlyos846S926dZPD4dDbb79tOhKiDCUDRLD6+nodffTRevzxx01HQZTiUhUggk2aNEmTJk0yHQNRjJEMAMAylAwAwDKUDADAMpQMAMAylAwAwDJcXQZEsLq6Om3evHnvx/n5+Vq5cqXS0tLUq1cvg8kQLbjjH4hg8+fP10knnbTf8csvv1wzZ84MfyBEHUoGAGAZzskAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALEPJAAAsQ8kAACxDyQAALPP/AZCtYH+rHZ7PAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_df['gender'].value_counts().plot(kind='pie',autopct='%.2f%%',radius=0.75)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6c60cba0-6084-4652-99b1-9f04b8654a72",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets explore the Sensor ID's in two different setups of experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f992191b-c80b-480c-aa6c-aee7caa56f3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Antena_ID\n",
       "1    21510\n",
       "4    14200\n",
       "3    12043\n",
       "2     4729\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[final_df['RFID']==4]['Antena_ID'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "63cc86aa-f0f9-4d64-a9cf-7cc85a4132ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Antena_ID\n",
       "3    12675\n",
       "2     9134\n",
       "1      837\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[final_df['RFID']==3]['Antena_ID'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3ea870e5-f399-40a4-8c26-ed6255609754",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Explore Antena_ID with Activites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ad0e1faf-c3bd-4ad7-98a7-8ad8847625c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>label</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101</td>\n",
       "      <td>529</td>\n",
       "      <td>3</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>547</td>\n",
       "      <td>1</td>\n",
       "      <td>8542</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>596</td>\n",
       "      <td>0</td>\n",
       "      <td>11992</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "label        1    2      3    4\n",
       "Antena_ID                      \n",
       "1          101  529      3  204\n",
       "2          547    1   8542   44\n",
       "3          596    0  11992   87"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3 anetana settings\n",
    "data_3 = final_df[final_df['RFID']==3]\n",
    "pd.crosstab(data_3['Antena_ID'],data_3['label'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d1b788af-3575-49db-9446-d45f7ac118a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>label</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9660</td>\n",
       "      <td>552</td>\n",
       "      <td>10569</td>\n",
       "      <td>729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17</td>\n",
       "      <td>3828</td>\n",
       "      <td>11</td>\n",
       "      <td>873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1648</td>\n",
       "      <td>1</td>\n",
       "      <td>10316</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3837</td>\n",
       "      <td>0</td>\n",
       "      <td>10087</td>\n",
       "      <td>276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "label         1     2      3    4\n",
       "Antena_ID                        \n",
       "1          9660   552  10569  729\n",
       "2            17  3828     11  873\n",
       "3          1648     1  10316   78\n",
       "4          3837     0  10087  276"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4 anetana settings\n",
    "data_4 = final_df[final_df['RFID']==4]\n",
    "pd.crosstab(data_4['Antena_ID'],data_4['label'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "644afb11-593f-4778-b3db-d8621ad0005a",
   "metadata": {},
   "source": [
    "## Predictive Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0d6d868f-7ca9-4eb5-a54c-4b33873d434a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets try to predict the activity if we have a data from the sensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5711438b-e9be-4633-9dca-2395f7df082e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets Start with Decision Tree as a base Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2ce97875-f3ce-4564-84e8-1871f1853404",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "13aae996-b22d-4b4b-b73b-5e2fb548a11d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before we proceed the target must encoded from 0 to n-1 (n : no of clasess)\n",
    "final_df['label']= final_df['label']-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7203408e-d83e-4fe2-be85-4fe60f70cf46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "2    51520\n",
       "0    16406\n",
       "1     4911\n",
       "3     2291\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e53c42e7-caa6-4b20-a67a-bddc6bc299c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can also remove the time variable\n",
    "final_df.drop(columns='Time',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2fbf3999-1bc1-4be7-89bc-4b717989c2f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Acc_f</th>\n",
       "      <th>Acc_v</th>\n",
       "      <th>Acc_l</th>\n",
       "      <th>Antena_ID</th>\n",
       "      <th>rssi</th>\n",
       "      <th>phase</th>\n",
       "      <th>freq</th>\n",
       "      <th>label</th>\n",
       "      <th>gender</th>\n",
       "      <th>RFID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-56.5</td>\n",
       "      <td>5.83680</td>\n",
       "      <td>921.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>3</td>\n",
       "      <td>-68.0</td>\n",
       "      <td>4.84120</td>\n",
       "      <td>925.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-55.5</td>\n",
       "      <td>3.64170</td>\n",
       "      <td>924.25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>3</td>\n",
       "      <td>-57.5</td>\n",
       "      <td>1.77790</td>\n",
       "      <td>924.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.51826</td>\n",
       "      <td>0.89339</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>4</td>\n",
       "      <td>-61.5</td>\n",
       "      <td>0.24083</td>\n",
       "      <td>922.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75123</th>\n",
       "      <td>0.57689</td>\n",
       "      <td>0.88191</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>3</td>\n",
       "      <td>-62.5</td>\n",
       "      <td>3.76290</td>\n",
       "      <td>922.75</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75124</th>\n",
       "      <td>0.57689</td>\n",
       "      <td>0.88191</td>\n",
       "      <td>0.134560</td>\n",
       "      <td>2</td>\n",
       "      <td>-63.5</td>\n",
       "      <td>5.60210</td>\n",
       "      <td>924.75</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75125</th>\n",
       "      <td>0.35411</td>\n",
       "      <td>0.96229</td>\n",
       "      <td>0.088944</td>\n",
       "      <td>1</td>\n",
       "      <td>-65.0</td>\n",
       "      <td>0.98175</td>\n",
       "      <td>923.75</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75126</th>\n",
       "      <td>0.35411</td>\n",
       "      <td>0.96229</td>\n",
       "      <td>0.088944</td>\n",
       "      <td>3</td>\n",
       "      <td>-60.0</td>\n",
       "      <td>1.46030</td>\n",
       "      <td>922.25</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75127</th>\n",
       "      <td>0.16650</td>\n",
       "      <td>1.01970</td>\n",
       "      <td>0.100350</td>\n",
       "      <td>1</td>\n",
       "      <td>-58.5</td>\n",
       "      <td>0.15493</td>\n",
       "      <td>922.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>75128 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Acc_f    Acc_v     Acc_l  Antena_ID  rssi    phase    freq  label  \\\n",
       "0      0.51826  0.89339  0.134560          4 -56.5  5.83680  921.75      0   \n",
       "1      0.51826  0.89339  0.134560          3 -68.0  4.84120  925.75      0   \n",
       "2      0.51826  0.89339  0.134560          4 -55.5  3.64170  924.25      0   \n",
       "3      0.51826  0.89339  0.134560          3 -57.5  1.77790  924.75      0   \n",
       "4      0.51826  0.89339  0.134560          4 -61.5  0.24083  922.75      0   \n",
       "...        ...      ...       ...        ...   ...      ...     ...    ...   \n",
       "75123  0.57689  0.88191  0.134560          3 -62.5  3.76290  922.75      0   \n",
       "75124  0.57689  0.88191  0.134560          2 -63.5  5.60210  924.75      0   \n",
       "75125  0.35411  0.96229  0.088944          1 -65.0  0.98175  923.75      0   \n",
       "75126  0.35411  0.96229  0.088944          3 -60.0  1.46030  922.25      0   \n",
       "75127  0.16650  1.01970  0.100350          1 -58.5  0.15493  922.75      3   \n",
       "\n",
       "       gender  RFID  \n",
       "0           0     4  \n",
       "1           0     4  \n",
       "2           0     4  \n",
       "3           0     4  \n",
       "4           0     4  \n",
       "...       ...   ...  \n",
       "75123       1     3  \n",
       "75124       1     3  \n",
       "75125       1     3  \n",
       "75126       1     3  \n",
       "75127       1     3  \n",
       "\n",
       "[75128 rows x 10 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1d133c30-7f49-4596-9494-5b62db5392aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train Test Split\n",
    "y = final_df['label']\n",
    "x = final_df.drop(columns='label')\n",
    "\n",
    "x_train,x_test,y_train,y_test = train_test_split(x,y,stratify=y,train_size=0.8,random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8d3f8f69-ae2e-475c-8676-a0e3231bcca1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60102, 9) (60102,)\n",
      "(15026, 9) (15026,)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape,y_train.shape)\n",
    "print(x_test.shape,y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "173e818b-751a-4a3c-8811-f5c11166308c",
   "metadata": {},
   "source": [
    "### Decision Tree (Base Model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f355c422-1f5a-4b8f-897b-ad8e5b685b38",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_dt = DecisionTreeClassifier(criterion='entropy',max_depth=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "04c90b73-c127-487d-ab60-0b1bcee31657",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=5)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_dt.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "115a4377-48a7-44c8-8844-8eb51b04c67d",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = model_dt.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3b8bb1b7-74fc-4502-8511-b92fa2107763",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.96      0.94      3282\n",
      "           1       0.86      0.93      0.89       982\n",
      "           2       1.00      1.00      1.00     10304\n",
      "           3       0.91      0.50      0.64       458\n",
      "\n",
      "    accuracy                           0.97     15026\n",
      "   macro avg       0.92      0.85      0.87     15026\n",
      "weighted avg       0.97      0.97      0.97     15026\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a792ac6b-01d4-4195-9d79-b97befb94343",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,pred),annot=True,cmap='RdBu',fmt='d')\n",
    "plt.ylabel('Actual Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0ffe33bd-7688-448b-9e2c-c6c0aee4847c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={&#x27;max_depth&#x27;: [9, 10, 11, 12, 13]}, scoring=&#x27;accuracy&#x27;,\n",
       "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={&#x27;max_depth&#x27;: [9, 10, 11, 12, 13]}, scoring=&#x27;accuracy&#x27;,\n",
       "             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=12)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=12)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={'max_depth': [9, 10, 11, 12, 13]}, scoring='accuracy',\n",
       "             verbose=1)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fine Tune The Decision Tree\n",
    "grid = {'max_depth':[9,10,11,12,13]}\n",
    "\n",
    "gscv = GridSearchCV(estimator=DecisionTreeClassifier(),cv=5,scoring='accuracy',\n",
    "                   verbose=1,param_grid=grid)\n",
    "\n",
    "gscv.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ce6b8efc-fdd7-447a-98e7-74c33d0dcbba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9851419181712092"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "73f67e53-78f1-4a1d-b129-b40d5dce09c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 12}"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ce5da2f0-6e27-4367-96ee-cb2636be6998",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=12)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=12)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(max_depth=12)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_dt = DecisionTreeClassifier(**gscv.best_params_)\n",
    "model_dt.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d6f4e769-d2c7-49eb-9bc8-66b8e210108b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = model_dt.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2c2197c0-e004-4c26-a190-bd0fc236fcb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.99      0.97      3282\n",
      "           1       0.97      0.99      0.98       982\n",
      "           2       1.00      1.00      1.00     10304\n",
      "           3       0.88      0.67      0.76       458\n",
      "\n",
      "    accuracy                           0.99     15026\n",
      "   macro avg       0.95      0.91      0.93     15026\n",
      "weighted avg       0.98      0.99      0.98     15026\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "45dd11ed-480a-4e3d-a3ab-c990acbe966c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,pred),annot=True,cmap='RdBu',fmt='d')\n",
    "plt.ylabel('Actual Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "0087f527-7c77-46e9-818f-d87970e3c833",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acc_v</th>\n",
       "      <td>0.705170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <td>0.118291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rssi</th>\n",
       "      <td>0.062073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_f</th>\n",
       "      <td>0.046622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFID</th>\n",
       "      <td>0.030267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_l</th>\n",
       "      <td>0.028573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phase</th>\n",
       "      <td>0.003226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>0.003118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.002660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 FI\n",
       "Acc_v      0.705170\n",
       "Antena_ID  0.118291\n",
       "rssi       0.062073\n",
       "Acc_f      0.046622\n",
       "RFID       0.030267\n",
       "Acc_l      0.028573\n",
       "phase      0.003226\n",
       "freq       0.003118\n",
       "gender     0.002660"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame({'FI':model_dt.feature_importances_},index=x.columns)\\\n",
    ".sort_values(by='FI',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cfa29b9-6ab1-47c2-8007-14be362908f3",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "33f1dc53-d765-4ff9-abd7-01163a57b755",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = {'n_estimators':[60,70,90,100],\n",
    "       'max_depth':[5,6,7]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "93fa1169-876d-451f-a45a-886daa4b1bae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(),\n",
       "             param_grid={&#x27;max_depth&#x27;: [5, 6, 7],\n",
       "                         &#x27;n_estimators&#x27;: [60, 70, 90, 100]},\n",
       "             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(),\n",
       "             param_grid={&#x27;max_depth&#x27;: [5, 6, 7],\n",
       "                         &#x27;n_estimators&#x27;: [60, 70, 90, 100]},\n",
       "             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=7, n_estimators=90)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=7, n_estimators=90)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestClassifier(),\n",
       "             param_grid={'max_depth': [5, 6, 7],\n",
       "                         'n_estimators': [60, 70, 90, 100]},\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv = GridSearchCV(estimator=RandomForestClassifier(),cv=5,scoring='accuracy',\n",
    "                   verbose=1,param_grid=grid)\n",
    "\n",
    "gscv.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9415fcdb-b8ef-4b09-b583-9721353a684e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9773218761233288"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "fdbd1e0b-4b4b-4dce-bda9-1c4456bb338e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 7, 'n_estimators': 90}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "5d6af65e-ef1b-4326-8f05-c4ad24370c88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-9 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-9 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-9 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-9 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-9 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-9 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-9 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-9 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-9 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-9 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-9 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-9 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-9 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" checked><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=7)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(max_depth=7)"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_rf = RandomForestClassifier(**gscv.best_params_)\n",
    "model_rf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3c83f65a-5e13-4712-ba57-e49ade65e755",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'model_rf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[54], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m pred \u001b[38;5;241m=\u001b[39m model_rf\u001b[38;5;241m.\u001b[39mpredict(x_test)\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(classification_report(y_test,pred))\n",
      "\u001b[1;31mNameError\u001b[0m: name 'model_rf' is not defined"
     ]
    }
   ],
   "source": [
    "pred = model_rf.predict(x_test)\n",
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba18c6fe-8024-4679-bd37-927abd3d238a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,pred),annot=True,cmap='RdBu',fmt='d')\n",
    "plt.ylabel('Actual Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "4cba2f50-b6ff-4dfe-ba70-87624eec4762",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acc_v</th>\n",
       "      <td>0.487360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_f</th>\n",
       "      <td>0.171960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <td>0.114017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_l</th>\n",
       "      <td>0.109837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rssi</th>\n",
       "      <td>0.055394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFID</th>\n",
       "      <td>0.048040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.011081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>0.001189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phase</th>\n",
       "      <td>0.001121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 FI\n",
       "Acc_v      0.487360\n",
       "Acc_f      0.171960\n",
       "Antena_ID  0.114017\n",
       "Acc_l      0.109837\n",
       "rssi       0.055394\n",
       "RFID       0.048040\n",
       "gender     0.011081\n",
       "freq       0.001189\n",
       "phase      0.001121"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame({'FI':model_rf.feature_importances_},index=x.columns)\\\n",
    ".sort_values(by='FI',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ec0858a-8347-45ec-854a-e3840a76f051",
   "metadata": {},
   "source": [
    "## XGBOOST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5aece252-23b2-4430-a1d3-003ee4768699",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
       "             estimator=XGBClassifier(base_score=None, booster=None,\n",
       "                                     callbacks=None, colsample_bylevel=None,\n",
       "                                     colsample_bynode=None,\n",
       "                                     colsample_bytree=None, device=None,\n",
       "                                     early_stopping_rounds=None,\n",
       "                                     enable_categorical=False, eval_metric=None,\n",
       "                                     feature_types=None, feature_weights=None,\n",
       "                                     gamma=None, grow_policy=None,\n",
       "                                     importance_type=None,\n",
       "                                     interaction_constraints=None,\n",
       "                                     learning_rate=None, max_bin=None,\n",
       "                                     max_cat_threshold=None,\n",
       "                                     max_cat_to_onehot=None,\n",
       "                                     max_delta_step=None, max_depth=None,\n",
       "                                     max_leaves=None, min_child_weight=None,\n",
       "                                     missing=nan, monotone_constraints=None,\n",
       "                                     multi_strategy=None, n_estimators=None,\n",
       "                                     n_jobs=None, num_parallel_tree=None, ...),\n",
       "             param_grid={&#x27;max_depth&#x27;: [5, 7, 8, 10, 12],\n",
       "                         &#x27;n_estimators&#x27;: [70, 90, 100, 120]},\n",
       "             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
       "             estimator=XGBClassifier(base_score=None, booster=None,\n",
       "                                     callbacks=None, colsample_bylevel=None,\n",
       "                                     colsample_bynode=None,\n",
       "                                     colsample_bytree=None, device=None,\n",
       "                                     early_stopping_rounds=None,\n",
       "                                     enable_categorical=False, eval_metric=None,\n",
       "                                     feature_types=None, feature_weights=None,\n",
       "                                     gamma=None, grow_policy=None,\n",
       "                                     importance_type=None,\n",
       "                                     interaction_constraints=None,\n",
       "                                     learning_rate=None, max_bin=None,\n",
       "                                     max_cat_threshold=None,\n",
       "                                     max_cat_to_onehot=None,\n",
       "                                     max_delta_step=None, max_depth=None,\n",
       "                                     max_leaves=None, min_child_weight=None,\n",
       "                                     missing=nan, monotone_constraints=None,\n",
       "                                     multi_strategy=None, n_estimators=None,\n",
       "                                     n_jobs=None, num_parallel_tree=None, ...),\n",
       "             param_grid={&#x27;max_depth&#x27;: [5, 7, 8, 10, 12],\n",
       "                         &#x27;n_estimators&#x27;: [70, 90, 100, 120]},\n",
       "             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: XGBClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBClassifier\">?<span>Documentation for XGBClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=XGBClassifier(base_score=None, booster=None,\n",
       "                                     callbacks=None, colsample_bylevel=None,\n",
       "                                     colsample_bynode=None,\n",
       "                                     colsample_bytree=None, device=None,\n",
       "                                     early_stopping_rounds=None,\n",
       "                                     enable_categorical=False, eval_metric=None,\n",
       "                                     feature_types=None, feature_weights=None,\n",
       "                                     gamma=None, grow_policy=None,\n",
       "                                     importance_type=None,\n",
       "                                     interaction_constraints=None,\n",
       "                                     learning_rate=None, max_bin=None,\n",
       "                                     max_cat_threshold=None,\n",
       "                                     max_cat_to_onehot=None,\n",
       "                                     max_delta_step=None, max_depth=None,\n",
       "                                     max_leaves=None, min_child_weight=None,\n",
       "                                     missing=nan, monotone_constraints=None,\n",
       "                                     multi_strategy=None, n_estimators=None,\n",
       "                                     n_jobs=None, num_parallel_tree=None, ...),\n",
       "             param_grid={'max_depth': [5, 7, 8, 10, 12],\n",
       "                         'n_estimators': [70, 90, 100, 120]},\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid = {'n_estimators':[70,90,100,120],\n",
    "       'max_depth':[5,7,8,10,12]}\n",
    "\n",
    "gscv = GridSearchCV(estimator=XGBClassifier(),cv=5,scoring='accuracy',\n",
    "                   verbose=1,param_grid=grid)\n",
    "\n",
    "gscv.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ce3d334e-44cf-4e77-807e-a8ad3a6630f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9912981262269674"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "8e025b4d-1db7-42af-8d62-fb995cc1935a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 12, 'n_estimators': 120}"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gscv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c8515b78-0ba2-4575-acce-8e7ff34204a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-6 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-6 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-6 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-6 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-6 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBClassifier\">?<span>Documentation for XGBClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_xgb = XGBClassifier(**gscv.best_params_)\n",
    "model_xgb.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "fc47a01c-d9bb-4264-9928-eaa560cdb269",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.99      3282\n",
      "           1       0.98      0.99      0.99       982\n",
      "           2       1.00      1.00      1.00     10304\n",
      "           3       0.94      0.85      0.89       458\n",
      "\n",
      "    accuracy                           0.99     15026\n",
      "   macro avg       0.98      0.96      0.97     15026\n",
      "weighted avg       0.99      0.99      0.99     15026\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pred = model_xgb.predict(x_test)\n",
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "2bac9451-8ccb-425a-bdf2-3297e395b4f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,pred),annot=True,cmap='RdBu',fmt='d')\n",
    "plt.ylabel('Actual Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ee23299d-85eb-4f57-a004-0aa5b51d43bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acc_v</th>\n",
       "      <td>0.473062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <td>0.271649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFID</th>\n",
       "      <td>0.122675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rssi</th>\n",
       "      <td>0.054750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_f</th>\n",
       "      <td>0.029218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_l</th>\n",
       "      <td>0.018812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.017934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>0.006645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phase</th>\n",
       "      <td>0.005255</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 FI\n",
       "Acc_v      0.473062\n",
       "Antena_ID  0.271649\n",
       "RFID       0.122675\n",
       "rssi       0.054750\n",
       "Acc_f      0.029218\n",
       "Acc_l      0.018812\n",
       "gender     0.017934\n",
       "freq       0.006645\n",
       "phase      0.005255"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame({'FI':model_xgb.feature_importances_},index=x.columns)\\\n",
    ".sort_values(by='FI',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "006f3a39-66d1-4cc2-8ced-d38c30f6bacf",
   "metadata": {},
   "source": [
    "## Validation Of Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3a41d89c-6ff9-4eba-bc32-7247b0044434",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gender, Freq and Phase dosent seems to be good enough features to predict the activity\n",
    "# We ca remove these features before fitting the final model (Feature Selection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "e60aab8a-6a35-4415-b74b-bc97124d9283",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train.drop(columns=['freq','phase','gender'], inplace=True)\n",
    "x_test.drop(columns=['freq','phase','gender'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "de99f3fd-4ede-4ec7-9fbb-0a0f777bb0c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-7 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-7 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-7 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-7 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-7 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-7 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-7 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-7 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBClassifier\">?<span>Documentation for XGBClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              feature_weights=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=12,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=120,\n",
       "              n_jobs=None, num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model = XGBClassifier(**gscv.best_params_)\n",
    "final_model.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ba94a0c3-cb2e-4992-b318-35d03e3f5303",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The score are eighter 0.99 or infact 1. That is clear indication of overfitting\n",
    "# We need to check wether we get the same score at different training datasets\n",
    "# In that way we will be able to identify how generalised the model is?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "acab815b-8608-4550-8666-040353278764",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold, cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "93d6b219-11ff-4d00-b7cb-2734b5736304",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.99103191, 0.99114838, 0.9903331 , 0.99277894, 0.99161426,\n",
       "       0.99114838, 0.99056604])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(estimator=final_model,X=x_train,y=y_train,scoring='accuracy',cv=KFold(n_splits=7,shuffle=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "80e9a4a7-6c2b-4546-bebe-13be30fcbbed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acc_v</th>\n",
       "      <td>0.415279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antena_ID</th>\n",
       "      <td>0.321486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFID</th>\n",
       "      <td>0.165780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rssi</th>\n",
       "      <td>0.051428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_f</th>\n",
       "      <td>0.026946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acc_l</th>\n",
       "      <td>0.019082</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 FI\n",
       "Acc_v      0.415279\n",
       "Antena_ID  0.321486\n",
       "RFID       0.165780\n",
       "rssi       0.051428\n",
       "Acc_f      0.026946\n",
       "Acc_l      0.019082"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame({'FI':final_model.feature_importances_},index=x_train.columns)\\\n",
    ".sort_values(by='FI',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "fc9830e8-794c-44de-a738-0046cbfba0c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.99      3282\n",
      "           1       0.98      0.99      0.98       982\n",
      "           2       1.00      1.00      1.00     10304\n",
      "           3       0.93      0.86      0.90       458\n",
      "\n",
      "    accuracy                           0.99     15026\n",
      "   macro avg       0.97      0.96      0.97     15026\n",
      "weighted avg       0.99      0.99      0.99     15026\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pred = final_model.predict(x_test)\n",
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c7d1adc1-07f7-4c5a-8b54-be4273323c1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,pred),annot=True,cmap='RdBu',fmt='d')\n",
    "plt.ylabel('Actual Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79cb8167-c409-4fa1-bdfd-48639bc15875",
   "metadata": {},
   "source": [
    "## Deployment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "e304ed14-4aab-4021-b781-c8a6fb489b0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3c7779d2-e5bb-4da5-a1d8-609ad697e3c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('final_model.joblib','wb') as file:\n",
    "    joblib.dump(final_model,file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "68bcd05d-2b02-4982-96af-9cd7b7d98c69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Acc_f', 'Acc_v', 'Acc_l', 'Antena_ID', 'rssi', 'RFID'],\n",
       "      dtype='<U9')"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.feature_names_in_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cba93176-726e-46d6-b7fb-351335cb0f9d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
